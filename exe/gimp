#!/usr/bin/env ruby

require 'optparse'
require 'gimp'
require 'yaml'
require 'hashie/mash'

options = Hashie::Mash.new(File.exist?('.gimp') ? YAML.load_file('.gimp') : {})
opts = OptionParser.new do |opts|
  opts.banner = 'Usage: gimp [options]'

  opts.on('-t', '--token ACCESS_TOKEN', 'GitHub access token') do |access_token|
    options.access_token = access_token
  end
  opts.on('-s', '--source SOURCE', 'Source repository') do |source|
    options.source = source
  end
  opts.on('-d', '--destination DESTINATION', 'Destination repository') do |destination|
    options.destination = destination
  end
  opts.on('-i', '--issues ISSUES', Array, 'Issue numbers') do |issues|
    options.issues = issues
  end
  opts.on('--exclude-labels [LABELS]', Array, 'Exclude labels', ' (exclude specific labels if LABELS supplied)') do |labels|
    options.labels ||= Hashie::Mash.new
    options.labels.exclude = labels || true
  end
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options.verbose = v
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  opts.on_tail("--version", "Show version") do
    puts Gimp::VERSION
    exit
  end
end

opts.parse!
unless options.token? && options.source? && options.destination? && options.issues?
  puts opts
  exit
end

mover = Gimp::Mover.new(options)
options.issues.each do |id|
  new_id = mover.move_issue(id)
  puts "#{options.source}##{id} -> #{options.destination}##{new_id}"
end
